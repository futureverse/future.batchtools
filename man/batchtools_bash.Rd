% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/batchtools_bash.R
\name{batchtools_bash}
\alias{batchtools_bash}
\alias{makeClusterFunctionsBash}
\title{A batchtools bash backend that resolves futures sequential via a Bash template script}
\usage{
batchtools_bash(
  cluster.functions = makeClusterFunctionsBash(template = "bash"),
  template = "bash",
  registry = list(),
  conf.file = findConfFile(),
  resources = list(),
  finalize = getOption("future.finalize", TRUE),
  ...
)

makeClusterFunctionsBash(template = "bash")
}
\arguments{
\item{cluster.functions}{(optional) Assigned as-is to the each future's
\pkg{batchtools} \link[batchtools:makeRegistry]{Registry}.}

\item{template}{(optional) Name of job-script template to be searched
for by \code{\link[batchtools:findTemplateFile]{batchtools::findTemplateFile()}}. If not found, it defaults to
the \code{templates/bash.tmpl} part of this package (see below).}

\item{registry}{(optional) A named list of settings applied to each
future's \pkg{batchtools} \link[batchtools:makeRegistry]{Registry}.
This is a more convenient alternative to using argument \code{conf.file}.}

\item{conf.file}{(optional) A "batchtools-configuration" R script, which
is sourced when each future's \pkg{batchtools}
\link[batchtools:makeRegistry]{Registry} is created. Any variables
created by this script is assigned to the registry.
The default file is the one found by \code{\link[batchtools:findConfFile]{batchtools::findConfFile()}}, if any.}

\item{resources}{(optional) A named list passed to the \pkg{batchtools}
job-script template as variable \code{resources}.  See Section 'Resources'
in \code{\link[batchtools:submitJobs]{batchtools::submitJobs()}} more details.}

\item{finalize}{If TRUE, a future's \pkg{batchtools}
\link[batchtools:makeRegistry]{Registry} is automatically deleted when
the future is garbage collected, otherwise not.}

\item{\ldots}{Not used.}
}
\value{
\code{makeClusterFunctionsBash()} returns a
\link[batchtools:makeClusterFunctions]{ClusterFunctions} object.
}
\description{
The \code{batchtools_bash} backend was added to illustrate how to write a
custom \pkg{future.batchtools} backend that uses a templated job script.
Please see the source code, for details.
}
\details{
Batchtools bash futures uses \pkg{batchtools} cluster functions
created by \code{\link[=makeClusterFunctionsBash]{makeClusterFunctionsBash()}} and requires that \code{bash} is
installed on the current machine and the \code{timeout} command is available.

The default template script \code{templates/bash.tmpl} can be found in:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{system.file("templates", "bash.tmpl", package = "future.batchtools")
}\if{html}{\out{</div>}}

and comprise:

\if{html}{\out{<div class="sourceCode bash">}}\preformatted{#!/bin/bash
######################################################################
# A batchtools launch script template
######################################################################

## Maximum runtime?
<\%
## The default maximum runtime is one hours
runtime <- resources[["runtime"]]
if (is.null(runtime)) runtime <- 3600
\%>

# Launch R and evaluate the batchtools R job
timeout <\%= runtime \%> Rscript -e 'batchtools::doJobCollection("<\%= uri \%>", output = "<\%= log.file \%>")'
}\if{html}{\out{</div>}}
}
\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Limit runtime to 30 seconds per future
plan(batchtools_bash, resources = list(runtime = 30))

message("Main process ID: ", Sys.getpid())

f <- future(Sys.getpid())
pid <- value(f)
message("Worker process ID: ", pid)
\dontshow{\}) # examplesIf}
}
