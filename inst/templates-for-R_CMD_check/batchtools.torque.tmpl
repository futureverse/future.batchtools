#!/bin/bash
######################################################################
# A batchtools launch script template for TORQUE/PBS
#
# Author: Henrik Bengtsson
######################################################################

## Job name
#PBS -N <%= job.name %>

## Direct streams to logfile
#PBS -o <%= log.file %>

## Merge standard error and output
#PBS -j oe

## Resources needed:
<%
  ## As-is resource specifications
  job_declarations <- resources[["asis"]]
  resources[["asis"]] <- NULL
    
  ## Should scheduler "details" be seen?
  details <- isTRUE(resources[["details"]])
  resources[["details"]] <- NULL

  ## Shell "startup" code to evaluate
  startup <- resources[["startup"]]
  resources[["startup"]] <- NULL
     
  ## Shell "shutdown" code to evaluate
  shutdown <- resources[["shutdown"]]
  resources[["shutdown"]] <- NULL
     
  ## Environment modules specifications
  modules <- resources[["modules"]]
  resources[["modules"]] <- NULL
     
  ## SPECIAL: For R CMD check package testing on HPC environments, which
  ## typically uses a temporary working directory that is local, we force
  ## it to use HPC-wide working directory
  path <- tools::R_user_dir("future.batchtools", "cache")
  path <- file.path(path, "R_CMD_check")
  if (!utils::file_test("-d", path)) dir.create(path, recursive = TRUE)
  job_declarations <- c(job_declarations, sprintf("-d %s", path))
  
  ## SPECIAL: Since we change working directory, the 'startup.Rs' file used
  ## by R CMD check is no longer found
  startup <- c(startup, "export R_TESTS=")
  
  ## Remaining resources are assumed to be of type '-l <key>=<value>'
  opts <- unlist(resources, use.names = TRUE)
  opts <- sprintf("-l %s=%s", names(opts), opts)
  job_declarations <- sprintf("#PBS %s", c(job_declarations, opts))
  writeLines(job_declarations)
%>

## Bash settings
set -e          # exit on error
set -u          # error on unset variables
set -o pipefail # fail a pipeline if any command fails
trap 'echo "ERROR: future.batchtools job script failed on line $LINENO" >&2; exit 1' ERR

echo "Batchtools information:"
echo "- job name: '<%= job.name %>'"
echo "- job log file: '<%= log.file %>'"
echo

<% if (length(startup) > 0) {
  writeLines(startup)
} %>

echo "Load environment modules:"
<% if (length(modules) > 0) {
  writeLines(c(sprintf("module load %s", modules), "module list"))
} %>

echo "Session information:"
echo "- timestamp: $(date)"
echo "- hostname: $(hostname)"
echo "- Rscript path: $(which Rscript)"
echo "- Rscript version: $(Rscript --version)"
echo "- Rscript library paths: $(Rscript -e "cat(shQuote(.libPaths()), sep = ' ')")"
echo

echo "Job submission declarations:"
<% if (length(modules) > 0) {
  writeLines(c(sprintf("module load %s", modules), "module list"))
} %>

<% if (details) { %>
if command -v qstat > /dev/null; then
  echo "Job information:"
  qstat -f "${PBS_JOBID}"
  echo
fi
<% } %>

## Launch R and evaluate the batchtools R job
echo "Command: Rscript -e 'batchtools::doJobCollection("<%= uri %>")' ..."
Rscript -e 'batchtools::doJobCollection("<%= uri %>")'
res=$?
echo " - exit code: ${res}"
echo "Command: Rscript -e 'batchtools::doJobCollection("<%= uri %>")' ... done"

<% if (details) { %>
if command -v qstat > /dev/null; then
  echo "Job summary:"
  qstat -f "${PBS_JOBID}"
fi    
<% } %>

<% if (length(shutdown) > 0) {
  writeLines(shutdown)
} %>

## Relay the exit code from Rscript
exit "${res}"
#!/usr/bin/env bash

## Job name:
#PBS -N fbt-<%= job.hash %>

## Merge standard error and output:
#PBS -j oe

## Direct streams to logfile:
#PBS -o <%= log.file %>

## Email on abort (a) and termination (e), but not when starting (b)
#PBS -m ae

## Mirror environment variables
#PBS -V

## Resources needed:
<% if (exists("resources", mode = "list") && length(resources) > 0) {
  if (isTRUE(getOption("future.debug"))) {
    R.utils::mcat("resources:")
    R.utils::mstr(resources)
  }
  opts <- unlist(resources, use.names = TRUE)
  opts <- sprintf("%s=%s", names(opts), opts)
  opts <- paste(opts, collapse = ",") %>
#PBS -l <%= opts %>
<% } %>

## SPECIAL: For R CMD check package testing on HPC environments, which
## typically uses a temporary working directory that is local, we force
## it to use HPC-wide working directory
#PBS -d <%= normalizePath(file.path("~", "tmp")) %>

## SPECIAL: Since we change working directory, the 'startup.Rs' file used
## by R CMD check is no longer found
export R_TESTS=

# For troubleshooting if there are errors
date
hostname
which Rscript
Rscript --version
Rscript -e ".libPaths()"

echo "Command: Rscript -e 'batchtools::doJobCollection("<%= uri %>")' ..."
Rscript -e 'batchtools::doJobCollection("<%= uri %>")'
echo "Command: Rscript -e 'batchtools::doJobCollection("<%= uri %>")' ... done"
